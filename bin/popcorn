#!/bin/bash
cat<<EOH
################################################################################
# Set our versions
################################################################################
EOH

if [ -f ~/.popcornrc ]; then 
    echo "using existing ~/.popcornrc"
    . ~/.popcornrc
else
    echo "creating ~/.popcornrc"
cat<<EOF > ~/.popcornrc
    export POPCORN_TMP="/tmp"
    export KERNEL=2.6.35
    export KSUBVER=13
    export AUFS_BRANCH=aufs2.1-35
    export CONFIG_GIST="446120"
    export BUILD_ROOT="/opt/local/src/"
    export http_proxy=http://squid:3128
    export SQUEEZE_BOX="http://mathie-vagrant-boxes.s3.amazonaws.com/debian_squeeze_32.box"
    export DEBIAN_MIRROR="ftp.us.debian.org"
EOF
    chmod 755 ~/.popcornrc
    . ~/.popcornrc
fi

cat<<EOH
################################################################################
# install a vm named popcorn to cook our kernel
################################################################################
EOH
if [ "$(hostname -s)" != "popcorn" ]; then 
    if [ -z "$(which vagrant)" ];then echo "vagrant is required" ; exit -1 ; fi
    if [ -z "$(which virtualbox)" ];then echo "virtualbox is required" ; exit -1 ; fi

    # ensure we have a vagrand box running headless named popcorn_*
    POPCORN_PID=$(ps -ef | grep 'VBoxHeadless --comment popcorn_' | grep -v grep | awk '{print $2}')
    SCRIPTDIR=$(cd $(dirname $0); pwd)
    SCRIPTNAME=$(basename $0)
    if [ -z "${POPCORN_PID}" ] ; then
        echo "creating popcorn vm"
        if [ ! -d ~/.vagrant.d/boxes/popcorn ]; then
            [ ! -d ~/vm/vagrant/popcorn ] && mkdir -p ~/vm/vagrant/popcorn
            if [ ! -f "${POPCORN_TMP}/debian_squeeze_32.box" ]; then 
                curl -k "${SQUEEZE_BOX}" > "${POPCORN_TMP}/debian_squeeze_32.box"
            fi
            ( cd ~/vm/vagrant; vagrant box add popcorn "${POPCORN_TMP}/debian_squeeze_32.box" )
            ( cd ~/vm/vagrant/popcorn; vagrant init popcorn )
        fi 
        if [ -z "$(ps -ef | grep 'VBoxHeadless --comment popcorn_' | grep -v grep)" ]; then 
            ( cd ~/vm/vagrant/popcorn; vagrant up )
        fi
    else
        #( cd ~/vm/vagrant/popcorn; vagrant destroy -f )
        echo "popcorn vm already exists"
    fi
    ( cd ~/vm/vagrant/popcorn;echo "sudo hostname popcorn"| vagrant ssh -- -A >/dev/null 2>&1 )
    ( cd ~/vm/vagrant/popcorn;echo "echo popcorn|sudo tee /etc/hostname" | vagrant ssh -- -A >/dev/null 2>&1)
    ( cd ~/vm/vagrant/popcorn;echo "sudo sed -ie 's/vagrant-debian-squeeze/popcorn/g' /etc/hosts" | vagrant ssh -- -A >/dev/null 2>&1)
    ( cd ~/vm/vagrant/popcorn;echo "sudo mkdir -p /root/.ssh "|vagrant ssh -- -A 2>/dev/null ) 
    ( cd ~/vm/vagrant/popcorn;echo "sudo chmod 750 /root/.ssh "|vagrant ssh -- -A 2>/dev/null ) 
    ( cd ~/vm/vagrant/popcorn;echo "echo $(cat ~/.ssh/*.pub) | sudo tee -a /root/.ssh/authorized_keys"|vagrant ssh -- -A >/dev/null 2>&1 ) 
    if [ -f ~/.popcornrc ]; then 
        # Copy this script to the virtualbox and sudo execute it...
         scp -P 2222                               \
             -o UserKnownHostsFile=/dev/null       \
             -o StrictHostKeyChecking=no           \
             -o LogLevel=ERROR                     \
             -o IdentitiesOnly=yes                 \
             -i ${HOME}/.ssh/id_dsa.pub            \
             -i ${HOME}/.ssh/id_rsa.pub            \
             ~/.popcornrc root@127.0.0.1:/root/.popcornrc > /dev/null 2>&1
    fi
    # Copy this script to the virtualbox and sudo execute it...
    DELETE='false'
    if [ ${SCRIPTNAME} == "bash" ]; then
       DELETE='true'
       SCRIPTDIR=$(mktemp -d /tmp/popcorn.XXXX);
       curl -sk https://raw.github.com/fapestniegd/popcorn/master/bin/popcorn > "${SCRIPTDIR}/popcorn"
       SCRIPTNAME='popcorn'
    fi
    scp -P 2222                                    \
        -o UserKnownHostsFile=/dev/null            \
        -o StrictHostKeyChecking=no                \
        -o LogLevel=ERROR                          \
        -o IdentitiesOnly=yes                      \
        -i ${HOME}/.vagrant.d/insecure_private_key \
       ${SCRIPTDIR}/${SCRIPTNAME} vagrant@127.0.0.1:${SCRIPTNAME} > /dev/null 2>&1
    if [ "${DELETE}" == "true" ]; then
        /bin/rm ${SCRIPTDIR}/${SCRIPTNAME}
        /bin/rmdir ${SCRIPTDIR}
    fi
    ( cd ~/vm/vagrant/popcorn; echo "ssh-keyscan -t dsa,rsa localhost >> ~/.ssh/known_hosts"|vagrant ssh -- -A >/dev/null 2>&1 ) 
    ( cd ~/vm/vagrant/popcorn; echo "chmod 755 ${SCRIPTNAME}"|vagrant ssh -- -A >/dev/null 2>&1 ) 
    ( cd ~/vm/vagrant/popcorn; echo "ssh -A root@localhost /home/vagrant/${SCRIPTNAME}"|vagrant ssh -- -A 2> run.err | tee run.out  ) 
cat<<EOF
################################################################################
#                            Return of Control                                 #
################################################################################
EOF

#   export BHASH=$(grep "BUNDLE_HASH=" ~/vm/vagrant/popcorn/run.out | sed -e 's/.*=//' -e "s/'//g")
#   export MHASH=$(grep "MODULE_HASH=" ~/vm/vagrant/popcorn/run.out | sed -e 's/.*=//' -e "s/'//g")
#   export DATETIME=$(grep "DATETIME=" ~/vm/vagrant/popcorn/run.out | sed -e 's/.*=//' -e "s/'//g")
#   export SHIP='true'
#   if [ -z "${BHASH}" ]; then SHIP='false'; fi
#   if [ -z "${MHASH}" ]; then SHIP='false'; fi
#   if [ -z "${DATETIME}" ]; then SHIP='false'; fi
#    if [ "$SHIP" == "true" ]; then
#        curl -sk https://raw.github.com/fapestniegd/popcorn/master/etc/templates/ro_update.tpl |     \
#            sed -e "s/~BHASH~/${BHASH}/g" -e "s/~MHASH~/${MHASH}/g" -e "s/~DATETIME~/${DATETIME}/g" \
#                -e "s/~KERNEL~/${KERNEL}.${KSUBVER}/g" > /var/tmp/ro_update_${DATETIME}
#        curl --insecure -X PUT -T "/var/tmp/ro_update_${DATETIME}" "https://stash.eftdomain.net/kernel_bundles/${DATETIME}/ro_update_${DATETIME}"
#    fi
#    # optionaly destrou
#    # ( cd ~/vm/vagrant/popcorn; vagrant halt )
#    # ( cd ~/vm/vagrant/popcorn; yes | vagrant destroy -f )
    exit 0;
fi

cat<<EOH
################################################################################
################################################################################
#                                                                              #
#              the payload below here will run in the virtualbox               #
#                                                                              #
################################################################################
################################################################################
EOH
export http_proxy=http://squid.eftdomain.net:3128

################################################################################################################################################################
# STAGE 1
################################################################################################################################################################
if [ "$(uname -r)" != "${KERNEL}.${KSUBVER}${APPEND_VERSION}" ]; then
cp /etc/rc.local /etc/rc.local.dist
grep "$(dirname $0)/$(basename $0)" /etc/rc.local 

if [ $? -eq 0 ]; then
cat<<EOF > /etc/rc.local 
[ -f /root/.popcornrc ] && . /root/.popcornrc
if [ "$(uname -r)" != "${KERNEL}.${KSUBVER}${APPEND_VERSION}" ]; then
    $(dirname $0)/$(basename $0)"
fi
EOF
chmod 755 /etc/rc.local
fi

cat<<EOH
################################################################################
# Get dependencies 
# (sub-shelling to work around apt's exiting omitting subsequent commands)
################################################################################
EOH
cat<<EOSL > /etc/apt/sources.list
deb http://${DEBIAN_MIRROR}/debian/ squeeze main 
deb-src http://${DEBIAN_MIRROR}/debian/ squeeze main          
deb http://security.debian.org/ squeeze/updates main                                                                 
deb-src http://security.debian.org/ squeeze/updates main                                                             
deb http://${DEBIAN_MIRROR}/debian/ squeeze-updates main                                                        
deb-src http://${DEBIAN_MIRROR}/debian/ squeeze-updates main   
EOSL
( apt-get update )
( export DEBIAN_FRONTEND=noninteractive; apt-get -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef --yes install debian-keyring )
( export DEBIAN_FRONTEND=noninteractive; apt-get -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef --yes upgrade )
( apt-get update )
(
  export DEBIAN_FRONTEND=noninteractive;
  apt-get -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef --yes \
          install gcc kernel-package libc6-dev tk libncurses5-dev fakeroot git-core   \
                  build-essential zlib1g-dev cryptsetup
)

cat<<EOH
################################################################################
# MIRRORING POPCORN
################################################################################
EOH
[ ! -d /var/cache/git ] && mkdir -p /var/cache/git
(
  cd /var/cache/git
  if [ ! -d /var/cache/git/popcorn ]; then
      echo "git clone https://${GITHUB_AUTH_TOKEN}github.com/fapestniegd/popcorn.git"
      git clone https://${GITHUB_AUTH_TOKEN}github.com/fapestniegd/popcorn.git
  else
      cd /var/cache/git/popcorn; git pull
  fi 
  cd /var/cache/git/popcorn
  VERSIONS=$(git branch -r | grep 'aufs2.1-' | sed -e 's/.*origin\///')
  for v in $(echo "${VERSIONS}"); do
      git checkout ${v} || git checkout -b ${v} origin/${v}
  done
)

cat<<EOH
################################################################################
# AUFS
################################################################################
EOH
# aufs
[ ! -d /var/cache/git ] && mkdir -p /var/cache/git
(
  cd /var/cache/git
  if [ ! -d /var/cache/git/aufs2-standalone ]; then
      echo "git clone https://${GITHUB_AUTH_TOKEN}github.com/fapestniegd/aufs2-standalone.git"
      git clone https://${GITHUB_AUTH_TOKEN}github.com/fapestniegd/aufs2-standalone.git
  else
      cd /var/cache/git/aufs2-standalone; git pull
  fi 
  cd /var/cache/git/aufs2-standalone
  # compatibility matrix => http://aufs.sourceforge.net/ 
  VERSIONS=$(git branch -r | grep 'aufs2.1-' | sed -e 's/.*origin\///')
  for v in $(echo "${VERSIONS}"); do
      git checkout ${v} || git checkout -b ${v} origin/${v}
  done
)


cat<<EOH
################################################################################
# This method downloads the aufs patch and we apply it to our BUILD_ROOT
################################################################################
EOH
# kernel
export PATCH_EXIT=1
[ ! -d ${BUILD_ROOT} ] && mkdir -p ${BUILD_ROOT}
if [ ! -f ${BUILD_ROOT}/linux-${KERNEL}.${KSUBVER}.tar.bz2 ]; then
    (cd ${BUILD_ROOT}; wget -q http://www.kernel.org/pub/linux/kernel/v2.6/longterm/v${KERNEL}/linux-${KERNEL}.${KSUBVER}.tar.bz2)
fi 

[ -h ${BUILD_ROOT}/linux ] && unlink ${BUILD_ROOT}/linux
( cd ${BUILD_ROOT}; tar xjf linux-${KERNEL}.${KSUBVER}.tar.bz2 )
( cd ${BUILD_ROOT}; ln -s linux-${KERNEL}.${KSUBVER} linux )

( cd /var/cache/git/aufs2-standalone; git checkout ${AUFS_BRANCH} >/dev/null 2>&1 )
# patch kernel with aufs
(
  cd ${BUILD_ROOT}/linux
  patch -p1 <  /var/cache/git/aufs2-standalone/aufs2-kbuild.patch     >/dev/null 2>&1      && \
  patch -p1 <  /var/cache/git/aufs2-standalone/aufs2-base.patch       >/dev/null 2>&1      && \
  patch -p1 <  /var/cache/git/aufs2-standalone/proc_map.patch         >/dev/null 2>&1      && \
  patch -p1 <  /var/cache/git/aufs2-standalone/aufs2-standalone.patch >/dev/null 2>&1      && \
  for x in Documentation fs ; do rsync -azP /var/cache/git/aufs2-standalone/${x}/ ${BUILD_ROOT}/linux/${x}/ > /dev/null ;done && \
  install -m 0755 /var/cache/git/aufs2-standalone/include/linux/aufs_type.h ${BUILD_ROOT}/linux/include/linux/aufs_type.h
)
PATCH_EXIT=$?
if [ $PATCH_EXIT -ne 0 ]; then 
    echo "Failure: ${KERNEL}.${KSUBVER} && ${branch} : ${PATCH_EXIT}"
    [ -d ${BUILD_ROOT}/linux-${KERNEL}.${KSUBVER} ] && rm -fr ${BUILD_ROOT}/linux-${KERNEL}.${KSUBVER}
    [ -h ${BUILD_ROOT}/linux ] && unlink /opt/local/src/linux
    exit 1
else
    echo "Success: ${KERNEL}.${KSUBVER} && ${branch} : ${PATCH_EXIT}"
fi


cat<<EOH
################################################################################
# Set up the source .config from a gist
################################################################################
EOH
OLDCONFIG_EXIT=0; # if we don't run it, assume it exited 0
if [ -f /var/cache/git/popcorn/conf/config-${KERNEL}.${KSUBVER} ]; then
    echo "Using config-${KERNEL}.${KSUBVER} from popcorn/conf"
else
    echo "no specific config found. Using default config"
    cp /var/cache/git/popcorn/conf/config.orig ${BUILD_ROOT}/linux/.config
    (cd $BUILD_ROOT/linux; make oldconfig)
    OLDCONFIG_EXIT=$?
fi
if [ ${OLDCONFIG_EXIT} -ne 0 ];then 
    echo "something went wrong with 'make oldconfig' Aborting..."
    exit 1
fi

if [ ${OLDCONFIG_EXIT} -ne 0 ];then 
    grep "CONFIG_AUFS_FS" ${BUILD_ROOT}/linux/.config || \
    (
      cp ${BUILD_ROOT}/linux/.config ${BUILD_ROOT}/linux/.config.preawk
      awk '{
            if($0~"CONFIG_EXOFS_DEBUG"){
              print $0;
              print "CONFIG_AUFS_FS=m";
              print "CONFIG_AUFS_BRANCH_MAX_127=y";
              print "# CONFIG_AUFS_BRANCH_MAX_511 is not set";
              print "# CONFIG_AUFS_BRANCH_MAX_1023 is not set";
              print "# CONFIG_AUFS_BRANCH_MAX_32767 is not set";
              print "# CONFIG_AUFS_HINOTIFY is not set";
              print "# CONFIG_AUFS_EXPORT is not set";
              print "# CONFIG_AUFS_RDU is not set";
              print "# CONFIG_AUFS_SP_IATTR is not set";
              print "# CONFIG_AUFS_SHWH is not set";
              print "# CONFIG_AUFS_BR_RAMFS is not set";
              print "# CONFIG_AUFS_BR_FUSE is not set";
              print "CONFIG_AUFS_BDEV_LOOP=y";
              print "# CONFIG_AUFS_DEBUG is not set ";
            }else{
              print $0;
            }
           }' ${BUILD_ROOT}/linux/.config.preawk > ${BUILD_ROOT}/linux/.config
          
    ) 
fi

cat<<EOH
################################################################################
# BUILDING THE PACKAGE (optional, non-aufs, to ensure everything up to here works)
################################################################################
EOH

[ -z "${APPEND_VERSION}" ] && APPEND_VERSION='-net5501'
[ -z "${REVISION}" ]       && REVISION=1
( cd ${BUILD_ROOT}/linux ;fakeroot make-kpkg clean )
( cd ${BUILD_ROOT}/linux ;fakeroot make-kpkg --append-to-version "${APPEND_VERSION}" --revision ${REVISION} kernel_image kernel_source kernel_headers kernel_doc )

# install this kernel and initrd on this virtualbox
( cd /etc/initramfs-tools; git branch | grep '* master' || git checkout master )
echo 'do_initrd = Yes' > /etc/kernel-img.conf
dpkg -i ${BUILD_ROOT}/linux-image-${KERNEL}.${KSUBVER}*.deb
mkinitramfs -o /boot/initrd.img-${KERNEL}.${KSUBVER}${APPEND_VERSION} ${KERNEL}.${KSUBVER}${APPEND_VERSION}
update-grub

cat<<EOH
################################################################################
# rebooting into ${KERNEL}.${KSUBVER}${APPEND_VERSION}
################################################################################
EOH
reboot 

################################################################################################################################################################
# STAGE 2
################################################################################################################################################################
else
mv /etc/rc.local.dist /etc/rc.local
cat<<EOH
################################################################################
# building rhinefet module
################################################################################
EOH

# we need to download and build rhinefet here
if [ ! -d /var/cache/git/rhinefet ]; then
    (cd /var/cache/git; git clone https://github.com/fapestniegd/rhinefet.git)
else
    (cd /var/cache/git/rhinefet; git pull)
fi
cd /var/cache/git/rhinefet; make
install -m 0755 /var/cache/git/rhinefet/rhinefet.ko /lib/modules/${KERNEL}.${KSUBVER}${APPEND_VERSION}/kernel/drivers/net
depmod -a
# grep -q rhinefet /etc/modules || echo "rhinefet" >> /etc/modules

cat<<EOH
################################################################################
# prepping initramfs-tools for soekris build
################################################################################
EOH

apt-get install -y initramfs-tools
if [ ! -d /etc/initramfs-tools/.git ]; then 
    ( cd /etc/initramfs-tools; git init; find * -type f -exec git add {} \;; git commit -a -m "addding initial files"; )
fi
( cd /etc/initramfs-tools; git branch | grep soekris     || git branch soekris )
( cd /etc/initramfs-tools; git branch | grep '* soekris' || git checkout soekris )

rsync -avzPC --delete --exclude .git /var/cache/git/popcorn/etc/initramfs-tools/ /etc/initramfs-tools/
( cd /etc/initramfs-tools; find * -type f -exec git add {} \; )
( cd /etc/initramfs-tools; git commit -a -m "rsync'ed from popcorn" )

( cd /etc/initramfs-tools; git branch | grep '* master' || git checkout master )

cat<<EOH
################################################################################
# create and inspect the initrd
################################################################################
EOH

( cd /etc/initramfs-tools; git branch | grep '* soekris' || git checkout soekris )
mkinitramfs -o /var/tmp/initrd.img-${KERNEL}.${KSUBVER}${APPEND_VERSION} ${KERNEL}.${KSUBVER}${APPEND_VERSION}

IRDTMP=$(mktemp -d /tmp/initrd.d.XXXX)
( cd ${IRDTMP}; cat /var/tmp/initrd.img-${KERNEL}.${KSUBVER}${APPEND_VERSION} | gzip -dc | cpio -idm )
( 
  cd ${IRDTMP}; 
  find * -name cryptsetup    | grep 'sbin/cryptsetup'                 && \
  find * -name root_on_crypt | grep 'scripts/local-top/root_on_crypt' && \
  find * -name aufs          | grep 'aufs'                            && \
  find * -name ro_root       | grep 'scripts/init-bottom/ro_root'
) 
EXIT=$?
echo "initrd exited with ${EXIT}"
[ -d "${IRDTMP}" ] && rm -fr "${IRDTMP}"
( cd /etc/initramfs-tools; git branch | grep '* master' || git checkout master )

cat<<EOH
################################################################################
# bundle up the kernel, config, system-map, initrd, and modules
################################################################################
EOH

export BUNDLE=$(mktemp -d /var/tmp/kernel_bundle.XXXX);
(cd /lib/modules; tar cvzf ${BUNDLE}/modules-${KERNEL}.${KSUBVER}${APPEND_VERSION} ${KERNEL}.${KSUBVER}${APPEND_VERSION}) 
MHASH=$(sha1sum ${BUNDLE}/modules-${KERNEL}.${KSUBVER}${APPEND_VERSION}|awk '{print $1}')
cp /boot/*-${KERNEL}.${KSUBVER}${APPEND_VERSION} ${BUNDLE}/
cp /var/tmp/initrd.img-${KERNEL}.${KSUBVER}${APPEND_VERSION} ${BUNDLE}/

(cd ${BUNDLE}; tar cvzf kernel-bundle-${KERNEL}.${KSUBVER}${APPEND_VERSION}.tgz *)
BHASH=$(sha1sum ${BUNDLE}/kernel-bundle-${KERNEL}.${KSUBVER}${APPEND_VERSION}.tgz | awk '{print $1}')
export DATETIME=$(date +'%Y%m%d%H%M')

cat<<EOF
################################################################################
#                                 Shipping...                                  #
################################################################################
EOF

curl --insecure -X PUT -T ${BUNDLE}/kernel-bundle-${KERNEL}.${KSUBVER}${APPEND_VERSION}.tgz \
    ${STASH_SERVER_URI}/kernel_bundles/${DATETIME}/kernel-bundle-${KERNEL}.${KSUBVER}${APPEND_VERSION}.tgz
# the kernel packages
for file in $(cd /opt/local/src; ls *.deb); do
    curl --insecure -X PUT -T /opt/local/src/${file} ${STASH_SERVER_URI}/kernel_packages/${DATETIME}/${file}
done

# the
echo
echo "DATETIME='${DATETIME}'"
echo "BUNDLE_HASH='${BHASH}'"
echo "MODULE_HASH='${MHASH}'"
echo

cat<<EOF
################################################################################
#                                End Payload                                   #
################################################################################

EOF
exit 0;
fi
